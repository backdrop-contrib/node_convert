<?php

/**
 * @file
 * The node_convert module converts nodes from one type to another.
 *
 * The node_convert module converts nodes from one type to another
 * along with other specified fields.
 */

include_once 'node_convert.util.inc';


define("APPEND_TO_BODY", 'append_to_body');
define("REPLACE_BODY", 'replace_body');
define('NODE_CONVERT_TEMPLATE_TABLE', 'node_convert_templates');
define('NODE_CONVERT_WATCHDOG', 'node_convert');
define('NODE_CONVERT_ADMIN_INC', 'node_convert.admin.inc');
define('NODE_CONVERT_FORMS_INC', 'node_convert.forms.inc');
define('NODE_CONVERT_BEHAVIOR_PLUGIN', 'node_convert_behavior');
define('NODE_CONVERT_CHANGE_HOOK', 'node_convert_change');

/**
 * Implements hook_permission().
 */
function node_convert_permission() {
  $types = node_type_get_types();
  $permissions = array(
    'administer conversion' => array(
      'title' => t('administer conversion'),
      'description' => t('Grants full permissions for converting between types.'),
    ),
  );
  foreach ($types as $type => $parameters) {
    $permissions['convert from ' . $type] = array(
      'title' => t('convert from ' . $type),
      'description' => t('Grants pemission for conversion from @type node types.', array('@type' => $type)),
    );
    $permissions['convert to ' . $type] = array(
      'title' => t('convert to ' . $type),
      'description' => t('Grants pemission for conversion to @type node types.', array('@type' => $type)),
    );
  }
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function node_convert_menu() {
  // @ignore druplart_array_init
  $items = array();

  $items['node/%node/convert'] = array(
    'title' => 'Convert',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_convert_conversion_form', 1),
    'access callback' => 'node_convert_check_access',
    'access arguments' => array(1),
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
    'file' => NODE_CONVERT_FORMS_INC,
  );

  $items['admin/content/convert'] = array(
    'title' => 'Convert content',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_convert_convert_action_confirm'),
    'access callback' => 'node_convert_check_access',
    'access arguments' => array(1),
    'weight' => 6,
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/node_convert_templates'] = array(
    'title' => 'Node Convert templates',
    'description' => 'List of templates used for converting nodes using Actions and Node Operations.',
    'page callback' => 'node_convert_templates',
    'access arguments' => array('administer conversion'),
    'type' => MENU_NORMAL_ITEM,
    'file' => NODE_CONVERT_ADMIN_INC,
  );

  $items['admin/structure/node_convert_templates/list'] = array(
    'title' => 'List',
    'access arguments' => array('administer conversion'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/node_convert_templates/add'] = array(
    'title' => 'Add template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_convert_add_template'),
    'access arguments' => array('administer conversion'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => NODE_CONVERT_ADMIN_INC,
  );

  $items['admin/structure/node_convert_templates/%'] = array(
    'title' => 'Template info',
    'page callback' => 'node_convert_template_info',
    'page arguments' => array(3),
    'access arguments' => array('administer conversion'),
    'type' => MENU_CALLBACK,
    'file' => NODE_CONVERT_ADMIN_INC,
  );

  $items['admin/structure/node_convert_templates/edit/%node_convert_template'] = array(
    'title' => 'Edit template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_convert_add_template', 4),
    'access arguments' => array('administer conversion'),
    'type' => MENU_CALLBACK,
    'file' => NODE_CONVERT_ADMIN_INC,
  );

  $items['admin/structure/node_convert_templates/delete/%'] = array(
    'title' => 'Delete template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('node_convert_template_delete_confirm', 4),
    'access arguments' => array('administer conversion'),
    'type' => MENU_CALLBACK,
    'file' => NODE_CONVERT_ADMIN_INC,
  );

  return $items;
}

/**
 * This is a wildcard loader for the menu item for template editing.
 *
 * @param $id
 * @return array|int
 */
function node_convert_template_load($id) {
  $template = node_convert_load_template($id);
  if (empty($template)) {
    return MENU_NOT_FOUND;
  }
  return $template;
}

/**
 * Implements hook_node_operations().
 */
function node_convert_node_operations() {
  $operations = array();
  $templates = node_convert_load_all_templates();
  foreach ($templates as $row) {
    $access = node_convert_check_template_permission_user(array('template_machine_name' =>  $row->machine_name));
    if ($access) {
      $operations['node_convert_' . $row->machine_name] = array(
        'label' => 'Convert template: ' . $row->name,
        'callback' => 'node_convert_convert_nodes_using_template',
        'callback arguments' => array($row->machine_name),
      );
    }
  }
  return $operations;
}

/**
 * Implements hook_action_info().
 */
function node_convert_action_info() {
  $actions = array(
    'node_convert_convert_action' => array(
      'label' => t("Convert content"),
      'type' => 'node',
      'callback' => 'node_convert_convert_action',
      'file' => 'user.actions.inc',
      'weight' => 10,
    ),
  );
  return $actions;
}

/**
 * Implements hook_theme().
 */
function node_convert_theme() {
  return array(
    'node_convert_conversion_form' => array(
      'render element' => 'form',
    ),
    'node_convert_add_template' => array(
      'render element' => 'form',
    ),
  );
}

/* ----------- The form theme functions ------------ */

/**
 * Themes the node conversion form.
 */
function theme_node_convert_conversion_form($variables) {
  $form = $variables['form'];
  $output = '';
  if (isset($form['current_type'])) {
    $output .= '<div>' . t("The current node type is:") . '<b>&nbsp;' . backdrop_render($form['current_type']) . '</b></div>';
  }
  // If there are no fields to convert, we notify the user
  if (isset($form['no_fields']['#value']) && $form['no_fields']['#value'] == TRUE) {
    $output .= '<div>' . t("There are no fields to convert. Please press Convert.") . '</div>';
  }
  $output .= backdrop_render_children($form);
  return $output;
}


/**
 * Themes the node conversion add template form.
 */
function theme_node_convert_add_template($variables) {
  $output = '';
  $form = $variables['form'];
  if ($form['step']['#value'] == "choose_destination_type") {
    $output  = '<div>' . t("Choose the source type of the nodes that should be shown, and the destination type to which they will be converted.") . '</div>';
    $output .= backdrop_render_children($form);
  }
  elseif ($form['step']['#value'] == "choose_destination_fields") {
    $output = '';
    if ($form['no_fields']['#value'] == TRUE) {
      $output .= '<div>' . t("There are no fields to convert. Please press Create.") . '</div>';
    }
    $output .= backdrop_render_children($form);
  }
  return $output;
}


/**
 * Queues a specific node for conversion.
 *
 * @param Node $node
 *   The node that will be converted.
 *
 * @ingroup actions
 */
function node_convert_convert_action($node, &$context = array()) {
  // Save the list of nodes to be converted in the session. Append to
  // the existing list if within the last minute, otherwise start a new list
  // of nodes.
  $last_action_time = 0;
  if (isset($_SESSION['node_convert_action'])) {
    $last_action_time = $_SESSION['node_convert_action']['timestamp'];
  }
  if (REQUEST_TIME - $last_action_time > 60) {
    $_SESSION['node_convert_action'] = array(
      'timestamp' => REQUEST_TIME,
      'nids' => array(),
    );
  }

  $_SESSION['node_convert_action']['nids'][] = $node->nid;

  $context['redirect'] = 'admin/content/convert';
}

/**
 * Node convert action form.
 */
function node_convert_convert_action_confirm($form, &$form_state) {
  if (isset($_SESSION['node_convert_action']['timestamp']) && (REQUEST_TIME - $_SESSION['node_convert_action']['timestamp'] < 6000)) {
    $nids = $_SESSION['node_convert_action']['nids'];
  }
  else {
    $nids = array();
  }

  $nodes = node_load_multiple($nids);

  if (empty($nodes)) {
    $destination = isset($_GET['destination']) ? $_GET['destination'] : 'admin/content';
    $form['empty']['#markup'] = '<p>' . t('Return to the <a href="!url">content administration page</a>.', array('!url' => url($destination))) . '</p>';
    backdrop_set_message(t('No content has been selected for conversion.'), 'error');
    return $form;
  }

  $form_state['nodes'] = $nodes;

  $form['node_list'] = array(
    '#theme' => 'item_list',
    '#items' => array(),
  );
  foreach ($nodes as $node) {
    $form['node_list']['#items'][] = check_plain($node->title) . ' (' . $node->type . ')';
  }

  $result = node_convert_load_all_templates();
  $templates = array();
  foreach ($result as $row) {
    $access = node_convert_check_template_permission_user(array('template_machine_name' => $row['machine_name']));
    if ($access == TRUE) {
      $templates[$row['machine_name']] = $row['name'];
    }
  }
  if (empty($templates)) {
    $destination = isset($_GET['destination']) ? $_GET['destination'] : 'admin/content';
    $form['empty']['#markup'] = '<p>' . t('Return to the <a href="!url">content administration page</a>.', array('!url' => url($destination))) . '</p>';
    backdrop_set_message(t('No conversion templates have been set up. <a href="!url">Create a template</a>.', array(
          '!url' => url('admin/structure/node_convert_templates/add',
          array(
            'query' => array(
              'destination' => 'admin/content/convert',
            ),
          ),
        ),
      ),
    ), 'error');
    return $form;
  }
  $form['template'] = array(
    '#type' => 'select',
    '#title' => t("Template"),
    '#description' => t("Conversion template to use."),
    '#options' => $templates,
    '#default_value' => isset($default_template) ? $default_template : '',
  );

  $confirm_question = format_plural(count($nodes), 'Are you sure you want to convert this content item?', 'Are you sure you want to convert these content items?');
  return confirm_form($form, $confirm_question, 'admin/content', NULL, t('Convert content'), t('Cancel'));
}

/**
 * Submit callback for the node convert action form.
 */
function node_convert_convert_action_confirm_submit($form, &$form_state) {
  $template_id = check_plain($form_state['values']['template']);
  $nids = $_SESSION['node_convert_action']['nids'];
  node_convert_convert_nodes_using_template($nids, $template_id);
  $form_state['redirect'] = 'admin/content';
}


/**
 * Checks if user can do conversions from this node's type.
 *
 * @param $node
 *   A node object to be checked.
 * @return
 *   TRUE if user can make conversions using this type, FALSE otherwise.
 */
function node_convert_check_access($node) {
  $access = (user_access('administer conversion') || user_access('convert from ' . $node->type)) ? TRUE : FALSE;
  return $access;
}

/**
 * Returns a list of node types that the user has access to, depending on the direction of conversion.
 *
 * @param $direction
 *   A string containing either 'to' or 'from'.
 * @return
 *   An array of node types or FALSE if the user doesn't have access to any node type.
 */
function node_convert_return_access_node_types($direction) {
  $list = array();
  $types = node_type_get_types();
  foreach ($types as $type => $parameters) {
    if ((user_access('administer conversion')) || (user_access('convert ' . $direction . ' ' . $type))) {
      $list[$type] = $parameters->name;
    }
  }
  if (!empty($list)) {
    return $list;
  }
  else {
    return FALSE;
  }
}

/**
 * Loads a conversion template array using template_machine_name.
 *
 * @param $template_machine_name
 *   The template machine name to use
 * @return array An array containing the template information or FALSE if there is no such template
 */
function node_convert_load_template($template_machine_name) {
  if ($template_machine_name && is_string($template_machine_name)) {
    $template = array();
    $config = config('node_convert.template.' . $template_machine_name);
    $data = $config->get('data');
    if (is_string($data)) {
      $template['data'] = unserialize($data);
      $template['machine_name'] = $template_machine_name;
      $template['name'] = $config->get('name');
      $template['source_type'] = $config->get('source_type');
      $template['destination_type'] = $config->get('destination_type');
      $template['action'] = $config->get('action');
    }
    if (!empty($template)) {
      return $template;
    }
  }
  return FALSE;
}

/**
 * Loads all templates.
 */
function node_convert_load_all_templates() {
  $templates = &backdrop_static(__FUNCTION__);
  if (!isset($templates)) {
    $templates = array();
    $config_names = config_get_names_with_prefix('node_convert.template.');
    foreach ($config_names as $config_name) {
      $template_machine_name = str_replace('node_convert.template.', '', $config_name);
      $templates[$template_machine_name] = node_convert_load_template($template_machine_name);
    }
  }
  return $templates;
}

/**
 * Delete a conversion template.
 *
 * @param $template
 *   A conversion template.
 */
function node_convert_delete_template($template) {
  $template_machine_name = NULL;

  if (is_array($template) && isset($template['machine_name'])) {
    $template_machine_name = $template['machine_name'];
  }
  elseif (is_string($template)) {
    $template_machine_name = $template;
  }
  if ($template_machine_name) {
    config('node_convert.template.' . $template_machine_name)->delete();
  }
}

/**
 * Saves a conversion template.
 */
function node_convert_save_template($template_name, $machine_name, $source_type, $destination_type, $data) {
  $result = NULL;
  $config = config('node_convert.template.' . $machine_name);
  $config->set('name', $template_name);
  $config->set('machine_name', $machine_name);
  $config->set('source_type', $source_type);
  $config->set('destination_type', $destination_type);
  $config->set('data', $data);
  $config->save();
  $result = $machine_name;
  return $result;
}

/**
 * Checks if the logged in user has access to use the conversion template.
 *
 * @param $data
 *   An array containing either of the following keys
 *   - template_machine_name The template machine name used for conversion
 *   - template  The template array containing data
 * @return
 *    TRUE if user can use the template, FALSE otherwise.
 */
function node_convert_check_template_permission_user($data) {
  if (!empty($data['template'])) {
    $template = $data['template'];
  }
  elseif (!empty($data['template_machine_name'])) {
    $template = node_convert_load_template($data['template_machine_name']);
  }
  else {
    return FALSE;
  }
  // User with this permission can convert from/to any content type.
  if (user_access('administer conversion')) {
    return TRUE;
  }

  $access = user_access('convert from ' . $template['source_type']) && user_access('convert to ' . $template['destination_type']);
  return $access;
}

/**
 * Converts a list of nodes using a given template
 *
 * @param $nodes
 *   An array containing a list of node nid's
 * @param $template_id
 *   The template to use for conversion
 * @return
 *    FALSE if the user doesn't have permission to use the template.
 */
function node_convert_convert_nodes_using_template($nodes, $template_id) {
  $template = node_convert_load_template($template_id);

  $access = node_convert_check_template_permission_user(array('template_machine_name' =>  $template_id));
  if ($access == FALSE) {
    backdrop_set_message(t("You don't have permission to use this conversion template."), 'warning', FALSE);
    return FALSE;
  }

  foreach ($nodes as $nid) {
    $node = node_load($nid);
    // The source type of the given node doesn't match the template one, so we
    // discard it with a message.
    if ($node->type != $template['source_type']) {
      backdrop_set_message(t("\"%title\" (ID %nid) doesn't match the template's specified source type. It has not been converted.", array('%title' => $node->title, '%nid' => $node->nid)), 'warning', FALSE);
    }
    else {
      $result = node_convert_node_convert($node->nid, $template['destination_type'], $template['data']['fields']['source'], $template['data']['fields']['destination'], $template['data']['no_fields'], $template['data']['hook_options']);
      // We display errors if there are any, or the default success message.
      node_convert_messages($result, array('nid' => $nid));
    }
  }

  return TRUE;
}

/**
 * Callback to check if an existing machine name for a template exists.
 */
function node_convert_machine_name_check($machine_name) {
  $config = config('node_convert.template.' . $machine_name);
  return (!empty($config->machine_name)) ? $config->machine_name : FALSE;
}

/**
 * Loads include files, that execute various behaviors on node conversion.
 *
 * These can also be defined by other modules.
 */
function node_convert_load_includes() {
  module_load_include('inc', 'node_convert', 'util');
}

/**
 * Declare API compatibility on behalf of certain modules.
 *
 * @return array
 */
function node_convert_provided_module_behaviors() {
  $provided_module_behaviors = array('xmlsitemap', 'comment', 'file');

  // Allow modules to disable behavior plugins implemented on behalf of
  // node convert.
  backdrop_alter(NODE_CONVERT_BEHAVIOR_PLUGIN, $provided_module_behaviors);

  return $provided_module_behaviors;
}

/**
 * Implements module_invoke_all().
 *
 * Additionally we add in a few other modules, for which we provide API integration.
 *
 * @param $hook
 * @param $data
 * @param $op
 * @return array
 */
function node_convert_invoke_all($hook, $data, $op) {
  $return = array();
  node_convert_load_includes();

  $provided_modules = node_convert_provided_module_behaviors();
  $provided_modules = array_combine($provided_modules, $provided_modules);
  // @todo: add in array of all modules that are using the API integration
  $other_modules = array();
  $all_modules = array_merge($provided_modules, $other_modules);

  foreach ($all_modules as $module => $info) {
    if (!module_exists($module)) {
      continue;
    }

    $function = $module . '_' . $hook;
    // Just because they implement the API and include a file does not guarantee
    // they implemented a hook function!
    if (!function_exists($function)) {
      continue;
    }

    $result = $function($data, $op);
    if (isset($result) && is_array($result)) {
      $return = array_merge_recursive($return, $result);
    }
    elseif (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}
